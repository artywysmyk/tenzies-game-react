[{"/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/index.js":"1","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/App.js":"2","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/components/Die.js":"3","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/index.js":"4","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/App.js":"5","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/components/Die.js":"6"},{"size":162,"mtime":1644590322808,"results":"7","hashOfConfig":"8"},{"size":4037,"mtime":1645112991199,"results":"9","hashOfConfig":"8"},{"size":580,"mtime":1644829039298,"results":"10","hashOfConfig":"8"},{"size":162,"mtime":1644590322808,"results":"11","hashOfConfig":"12"},{"size":4216,"mtime":1645708361877,"results":"13","hashOfConfig":"12"},{"size":580,"mtime":1644829039298,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"tgvor2",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vo1zvo",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/index.js",[],[],["36","37"],"/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/App.js",["38","39"],[],"\nimport Die from \"./components/Die\"\nimport React from \"react\"\nimport {nanoid} from \"nanoid\"\nimport Confetti from 'react-confetti'\n\n\nexport default function App(){\n\n  const [dice, setDice] = React.useState(allNewDice())\n  const [tenzies, setTenzies] = React.useState(false)\n  const [numRolls, setNumRolls] = React.useState(0)\n  const [time, setTime] = React.useState({\n    m: 0,\n    s: 0\n  })\n  const [timeOn, setTimeOn] = React.useState(false)\n  const [bestTime, setBestTime] = React.useState() \n  const [runInterval, setRunInterval] = React.useState()\n  const [clearAll, setClearAll] = React.useState(false)\n \n\n\n /* Winning the game*/\n\n  React.useEffect( ()=>{\n    /*check if all dice are held and if all dice have the same value*/\n    const allHeld = dice.every(dice=> dice.isHeld)\n    const firstValue = dice[0].value\n    const allSameValue = dice.every(dice=> dice.value === firstValue)\n    if(allHeld && allSameValue){\n      setTenzies(true)\n      setTimeOn(false)\n    }\n  }, [dice])\n\n\n /* starting and stopping the timer*/\n\nReact.useEffect(()=>{\n  !timeOn ?\n  clearInterval(runInterval) :\n  setRunInterval(setInterval(()=>{\n    setTime(prev => {\n      return prev.s === 60 ? \n      {m: prev.m+1, s: 0} :\n      {m: prev.m, s: prev.s+1}\n  })\n  }, 1000))\n}, [timeOn])\n\n\n  function displayTime(time){\n    /* 00: 00 */\n    return `${time.m < 10 ? \"0\" : \"\"}${time.m}:${time.s < 10 ? \"0\" : \"\"}${time.s}`\n  }\n  \n\n/* Saving best time */\n\n\n React.useEffect(()=> {\n  if (!tenzies){\n    const best = JSON.parse(localStorage.getItem(\"bestTime\"))\n    best && setBestTime(best)\n  } else {\n    if(bestTime){\n    const newTime = parseInt(`${time.m}${time.s}`)\n    const best = parseInt(`${bestTime.m}${bestTime.s}`)\n    if(newTime < best){\n      localStorage.setItem(\"bestTime\", JSON.stringify(time))\n      setBestTime(time)\n    }\n  } else {\n    localStorage.setItem(\"bestTime\", JSON.stringify(time))\n    setBestTime(time)\n  } \n}\n }, [tenzies])\n\n\nfunction generateNewDice(){\n  return {\n     value: Math.ceil(Math.random()*6),\n      isHeld: false,\n      id: nanoid()\n  }\n}\n\n\n  function allNewDice(){\n    const newDice = []\n    for(let i=0; i<10; i++){\n      newDice.push(generateNewDice()\n      )\n    }\n    return newDice\n  }\n\n\n  React.useEffect( ()=>{\n    if(clearAll){\n      localStorage.removeItem(\"bestTime\")\n      console.log(\"storage cleared\")\n    } else{\n      console.log(\"storage not cleared\")\n    }\n  }, [clearAll])\n\n  function clearStorage(){\n    reset()\n    setClearAll(true)\n  }\n\n  function reset(){\n    setTenzies(false)\n      setDice(allNewDice())\n      setNumRolls(0)\n      setTime({m:0, s:0})\n      setTimeOn(false)\n      setBestTime()\n\n  }\n\n  function rollDice(){\n    if(!tenzies){\n      setDice(oldDice=>oldDice.map(dice=>{\n      return dice.isHeld ?\n      dice :\n      generateNewDice()\n    }))\n    setNumRolls(prev => prev + 1)\n    } else {\n      reset()\n    }\n  }\n\n  function holdDice(id){\n    setDice(oldDice=> oldDice.map(dice=>{\n      return dice.id === id \n      ? {...dice, isHeld: !dice.isHeld}\n      : dice\n    }) )\n    !timeOn && setTimeOn(true)\n  }\n\n\n  const diceElements = dice.map(die => <Die key={die.id} value= {die.value} isHeld={die.isHeld} holdDice={()=>holdDice(die.id)}/>)\n\n\n    return(\n            <main>\n              {tenzies &&\n                <Confetti\n                />\n              }\n              <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n                <p className=\"scores\">\n                Rolls: {numRolls} |\n                Time: {displayTime(time)} \n                {bestTime && `| Best time: ${displayTime(bestTime)}`} \n            </p>\n                <div className=\"dice-container\">\n                {diceElements}\n                </div>\n                <button className=\"roll-dice\" onClick={rollDice}>{tenzies ? \"Start again\" : \"Roll\"}</button>\n                <button className=\"reset\" onClick={clearStorage}>Reset</button>\n            </main>\n    )\n}","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game/src/components/Die.js",[],[],"/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/index.js",[],[],"/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/App.js",["40","41"],[],"\nimport Die from \"./components/Die\"\nimport React from \"react\"\nimport {nanoid} from \"nanoid\"\nimport Confetti from 'react-confetti'\n\n\nexport default function App(){\n const styles = {\n       color: \"green\"\n   }\n\n  const [dice, setDice] = React.useState(allNewDice())\n  const [tenzies, setTenzies] = React.useState(false)\n  const [numRolls, setNumRolls] = React.useState(0)\n  const [time, setTime] = React.useState({\n    m: 0,\n    s: 0\n  })\n  const [timeOn, setTimeOn] = React.useState(false)\n  const [bestTime, setBestTime] = React.useState(\n    ()=>JSON.parse(localStorage.getItem(\"bestTime\")) \n  ) \n  const [runInterval, setRunInterval] = React.useState()\n  const [clearAll, setClearAll] = React.useState(false)\n \n\n\n /* Winning the game*/\n\n  React.useEffect( ()=>{\n    /*check if all dice are held and if all dice have the same value*/\n    const allHeld = dice.every(dice=> dice.isHeld)\n    const firstValue = dice[0].value\n    const allSameValue = dice.every(dice=> dice.value === firstValue)\n    if(allHeld && allSameValue){\n      setTenzies(true)\n      setTimeOn(false)\n    }\n  }, [dice])\n\n\n /* starting and stopping the timer*/\n\nReact.useEffect(()=>{\n  !timeOn ?\n  clearInterval(runInterval) :\n  setRunInterval(setInterval(()=>{\n    setTime(prev => {\n      return prev.s === 60 ? \n      {m: prev.m+1, s: 0} :\n      {m: prev.m, s: prev.s+1}\n  })\n  }, 1000))\n}, [timeOn])\n\n\n  function displayTime(time){\n    /* 00: 00 */\n    return `${time.m < 10 ? \"0\" : \"\"}${time.m}:${time.s < 10 ? \"0\" : \"\"}${time.s}`\n  }\n  \n\n/* Saving best time */\n\n\n React.useEffect(()=> {\n  if (!tenzies){\n    const best = JSON.parse(localStorage.getItem(\"bestTime\"))\n    best && setBestTime(best)\n  } else {\n    if(bestTime){\n    const newTime = parseInt(`${time.m}${time.s}`)\n    const best = parseInt(`${bestTime.m}${bestTime.s}`)\n    if(newTime < best){\n      localStorage.setItem(\"bestTime\", JSON.stringify(time))\n      setBestTime(time)\n    }\n  } else {\n    localStorage.setItem(\"bestTime\", JSON.stringify(time))\n    setBestTime(time)\n  } \n}\nsetClearAll(false)\n }, [tenzies])\n\n\nfunction generateNewDice(){\n  return {\n     value: Math.ceil(Math.random()*6),\n      isHeld: false,\n      id: nanoid()\n  }\n}\n\n\n  function allNewDice(){\n    const newDice = []\n    for(let i=0; i<10; i++){\n      newDice.push(generateNewDice()\n      )\n    }\n    return newDice\n  }\n\n\n  React.useEffect( ()=>{\n    if(clearAll === true){\n      localStorage.removeItem(\"bestTime\")\n      console.log(\"storage cleared\")\n      setBestTime()\n    } else{\n      console.log(\"storage not cleared\")\n    }\n  }, [clearAll])\n\n  function clearStorage(){\n    reset()\n    setClearAll(true)\n  }\n\n  function reset(){\n    setTenzies(false)\n      setDice(allNewDice())\n      setNumRolls(0)\n      setTime({m:0, s:0})\n      setTimeOn(false)\n      /*setBestTime()*/\n\n  }\n\n  function rollDice(){\n    if(!tenzies){\n      setDice(oldDice=>oldDice.map(dice=>{\n      return dice.isHeld ?\n      dice :\n      generateNewDice()\n    }))\n    setNumRolls(prev => prev + 1)\n    } else {\n      reset()\n    }\n  }\n\n  function holdDice(id){\n    setDice(oldDice=> oldDice.map(dice=>{\n      return dice.id === id \n      ? {...dice, isHeld: !dice.isHeld}\n      : dice\n    }) )\n    !timeOn && setTimeOn(true)\n  }\n\n\n  const diceElements = dice.map(die => <Die key={die.id} value= {die.value} isHeld={die.isHeld} holdDice={()=>holdDice(die.id)}/>)\n\n\n    return(\n\n            <main>\n              {tenzies &&\n                <Confetti\n                />\n              }\n              <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n                <p className=\"scores\">\n                Rolls: {numRolls} |\n                Time: {displayTime(time)} \n                {bestTime && <p style={styles}>{`| Best time: ${displayTime(bestTime)}`}</p>} \n            </p>\n                <div className=\"dice-container\">\n                {diceElements}\n                </div>\n                <button className=\"roll-dice\" onClick={rollDice}>{tenzies ? \"Start again\" : \"Roll\"}</button>\n                <button className=\"reset\" onClick={clearStorage}>Reset</button>\n            </main>\n    )\n}","/Users/yvesmanigault/Documents/Candidature Anna/web dev/react/tenzies-game2/src/components/Die.js",[],[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":50,"column":4,"nodeType":"48","endLine":50,"endColumn":12,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":79,"column":5,"nodeType":"48","endLine":79,"endColumn":14,"suggestions":"51"},{"ruleId":"46","severity":1,"message":"47","line":55,"column":4,"nodeType":"48","endLine":55,"endColumn":12,"suggestions":"52"},{"ruleId":"46","severity":1,"message":"50","line":85,"column":5,"nodeType":"48","endLine":85,"endColumn":14,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'runInterval'. Either include it or remove the dependency array.","ArrayExpression",["56"],"React Hook React.useEffect has missing dependencies: 'bestTime' and 'time'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBestTime' needs the current value of 'time'.",["57"],["58"],["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"desc":"60","fix":"64"},{"desc":"62","fix":"65"},"Update the dependencies array to be: [runInterval, timeOn]",{"range":"66","text":"67"},"Update the dependencies array to be: [bestTime, tenzies, time]",{"range":"68","text":"69"},{"range":"70","text":"67"},{"range":"71","text":"69"},[1261,1269],"[runInterval, timeOn]",[1923,1932],"[bestTime, tenzies, time]",[1363,1371],[2044,2053]]